using UnityEngine;
using UnityEngine.UI;
using System;
using System.Collections;

public class TouchCtrl : MonoBehaviour
{
    HeroMove player;
    RectTransform touchCtrl;

    Vector2 startPos;
    int touchID = -1;

    float dragRadius = 50;
    public  bool btnPressed = false;

    private void Start()
    {
        player = FindObjectOfType<HeroMove>();
        touchCtrl = GetComponent<RectTransform>();
        startPos = touchCtrl.position;
    }
    //터치를 시작(event trigger)
    public void TouchDown()
    {
        btnPressed = true;
    }
    public void TouchUp()
    {
        btnPressed = false;
    }
    private void Update()
    {
        HandleTouchPhase();
#if UNITY_EDITOR
        SendInputValue(Input.mousePosition);
#endif 
    }

    private void HandleTouchPhase()
    {
        int i = 0;
        if (Input.touchCount > 0)
        {
            foreach (var touch in Input.touches)
            {
                i++;
                Vector3 touchPos = new Vector3(touch.position.x, touch.position.y, 0);

                switch (touch.phase)
                {
                    case TouchPhase.Began:
                        if (touch.position.x <= startPos.x + dragRadius)
                            touchID = i;
                        break;
                    case TouchPhase.Moved:
                        if (touchID == i) SendInputValue(touchPos);
                        break;
                    case TouchPhase.Stationary:
                        if (touchID == i) SendInputValue(touchPos);
                        break;
                    case TouchPhase.Ended:
                        if (touchID == i) touchID = -1;
                        break;
                }
            }
        }
    }

    private void SendInputValue(Vector2 touchPos)
    {
        if (btnPressed)
        {
            Vector2 gabPos = touchPos - startPos;
            if (gabPos.sqrMagnitude <= dragRadius * dragRadius)
            {
                touchCtrl.position = touchPos;
            }
            else
            {
                touchCtrl.position = startPos + dragRadius * gabPos.normalized;
            }
        }
        else
        {
            touchCtrl.position = startPos;
        }
        Vector2 touchPosXY 
            = new Vector2(touchCtrl.position.x, touchCtrl.position.y);
        Vector2 diff = touchPosXY - startPos;
        Vector2 normDiff = new Vector2(diff.x / dragRadius, diff.y / dragRadius);

        if(player!= null)
        {
            player.OnTouchValueChanage(normDiff);
        }
    }
}